help()
licence()
q()
getwd()
q()
r
R
apply
environment()
environment(apply)
sapply()
sapply
lapply
factor
save
data("iris")
iris
attributes(iris)
install.packages("swirl")
install.packages("swirl")
getwd()
cd
as.character(19)
as.character(19)+"dir"
as.character(19)
"dir"+"do"
cbind("dd","ee")
append("aa","bb")
append(aa,nn)
paste('aa','bbb')
paste('aa','bbb' , sep = "")
formatC(3,width = 3)
formatC(3,width = 3 , flag = "0")
help("formatC")
doc = formatC(3,width = 3 , flag = "0")
doc = paste(doc , ".csv" )
doc
doc = formatC(3,width = 3 , flag = "0")
doc = paste(doc , ".csv" ,sep = "")
doc = formatC(30,width = 3 , flag = "0")
value = 10
doc = formatC(value , width = 3 , flag = "0")
getwd
getwd()
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data = data.frame()
cur_dir = ""
for(value in directory)
{
cur_dir = paste(cur_dir,value, sep = "//")
}
for(value in id)
{
str = formatC(value , width = 3 , flag = "0")
str = paste(str, ".csv" , sep = "")
fullFileName = paste(cur_dir , str , sep = "//")
data = rbind(data , read.csv(fullFileName))
}
print(data(1:10))
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
ret = 0.0
ret
}
curdir = "/home/phenix/RAssign/A1/specdata"
curd
curdir
pollutantmean(curdir , "nitor")
pollutantmean(curdir , "nitor" , 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data = data.frame()
cur_dir = ""
for(value in directory)
{
cur_dir = paste(cur_dir,value, sep = "//")
}
for(value in id)
{
str = formatC(value , width = 3 , flag = "0")
str = paste(str, ".csv" , sep = "")
fullFileName = paste(cur_dir , str , sep = "//")
data = rbind(data , read.csv(fullFileName))
}
dim(data)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
ret = 0.0
ret
}
pollutantmean(curdir , "nitor" , 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data = data.frame()
cur_dir = ""
for(value in directory)
{
cur_dir = paste(cur_dir,value, sep = "//")
}
for(value in id)
{
str = formatC(value , width = 3 , flag = "0")
str = paste(str, ".csv" , sep = "")
fullFileName = paste(cur_dir , str , sep = "//")
print(fullFileName)
data = rbind(data , read.csv(fullFileName))
}
dim(data)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
ret = 0.0
ret
}
pollutantmean(curdir , "nitor" , 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data = data.frame()
cur_dir = ""
for(value in directory)
{
if(cur_dir=="") cur_dir = value
else cur_dir = paste(cur_dir,value, sep = "//")
}
for(value in id)
{
str = formatC(value , width = 3 , flag = "0")
str = paste(str, ".csv" , sep = "")
fullFileName = paste(cur_dir , str , sep = "/")
print(fullFileName)
data = rbind(data , read.csv(fullFileName))
}
dim(data)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
ret = 0.0
ret
}
pollutantmean(curdir , "nitor" , 1:10)
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data = data.frame()
cur_dir = ""
for(value in directory)
{
if(cur_dir=="") cur_dir = value
else cur_dir = paste(cur_dir,value, sep = "//")
}
for(value in id)
{
str = formatC(value , width = 3 , flag = "0")
str = paste(str, ".csv" , sep = "")
fullFileName = paste(cur_dir , str , sep = "/")
print(fullFileName)
data = rbind(data , read.csv(fullFileName))
}
print(data)
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
ret = 0.0
ret
}
pollutantmean(curdir , "nitor" , 1:2)
pollutantmean(curdir , "nitor" , 1:2)
pollutantmean <- function(directory, pollutant, id = 1:332)
{
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
data = data.frame()
cur_dir = ""
for(value in directory)
{
if(cur_dir=="") cur_dir = value
else cur_dir = paste(cur_dir,value, sep = "//")
}
for(value in id)
{
str = formatC(value , width = 3 , flag = "0")
str = paste(str, ".csv" , sep = "")
fullFileName = paste(cur_dir , str , sep = "/")
print(fullFileName)
data = rbind(data , read.csv(fullFileName))
}
p = as.matrix(data)
print(p[1:10 , ])
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
## NOTE: Do not round the result!
ret = 0.0
ret
}
pollutantmean(curdir , "nitor" , 1:2)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitor" , 1:2)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitor" , 1:2)
pollutantmean(curdir , "nitor" , 1:2)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitor" , 1:2)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitor" , 1:2)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitor" , 1:2)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitor" , 1:2)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitor" , 1:2)
pollutantmean(curdir , "nitor" ,1:10)
x = c(NA , 2,3,NA)
u = is.na(x)
x = x[!u]
x
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "sulfate", 1:10)
pollutantmean(curdir , "nitrate", 1:10)
curdir
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitrate", 1:10)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "nitrate", 1:10)
pollutantmean(curdir , "sulfate", 1:10)
data = read.csv(paste(curdir,"001.csv",sep = "/"))
sapply(data,function(y){X[y]} ,y = "nitrate)
;
)
;
)
)
{}
}
}
q()
exit
qq
m,d.gml/d
adfsdfsa
df,
sadf
,
)
)
);
exit
exit
pollutantmean(curdir , "nitrate", 1:10)
sapply(data)
sapply(data , is.numeric)
data['sulfate']
pol ='sulfate'
data[pol]
v = data[pol]
v
u = is.na(v)
v = v[u]
v
v = data[pol]
u = is.na(v)
v = v[!u]
v
attributes(v)
sum(v)
length(v)
v = data[pol]
u = is.na(v)
u = !is.na(v)
v = v[u]
sum(V)
sum(v)
data = read.csv(paste(curdir,"001.csv",sep = "/"))
data = rbind(data , read.csv(paste(curdir,"002.csv",sep = "/")))
v = data[pol]
u = !is.na(v)
v = v[u]
sum(v)
sum(v)/length(v)
source("/home/phenix/RAssign/A1/pollutantmean.R")
pollutantmean(curdir , "sulfate" , 1:10)
dim(data)
nrow(data)
v = c(1,2,3,4)
dim(v)
length(row())
length(v)
add1(v,10)
append(v , 10)
v =c()
v
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
complete(curdir , c(1,2))
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
source("/home/phenix/RAssign/A1/complete.R")
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
complete(curdir , c(1,2))
v= c()
append(v,10)
v
v = append(v,10)
v
v = append(v,10)
v
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
data
complete.cases(data)
u = complete.cases(data)
data[u]
u = complete.cases(data , drop = FALSE)
u = complete.cases(data , data[ , 1:4])
u
data[u , ]
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
source("/home/phenix/RAssign/A1/complete.R")
complete(curdir , c(1,2))
complete(curdir , c(2, 4, 8, 10, 12))
?cor
v = vector("numeric" , 0L)
v
append(v, 10.0)
v = append(v, 10.0)
source("/home/phenix/RAssign/A1/corr.R")
corr(curdir , 150)
head(cr)
p = corr(curdir , 150)
head(p)
summary(p)
setwd("/home/phenix/RAssign/A1/")
getwd()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
ls
list.files()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
installed.packages(RCurl)
install.packages("RCurl")
setwd()
setwd("")
setwd(".")
setwd("/home/phenix/")
install.packages("RCurl")
install.packages("RCurl" , lib = )
library(RCurl)
install.packages("RCurl")
library(RCurl)
submit()
?algorithm
library(neuralnet)
?algorithm
?neuralnet
setwd("/home/phenix/Documents/MLPractice/kaggleDigitInR/")
library(neuralnet)
str(neuralnet)
